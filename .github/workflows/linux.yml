name: CI

on:
  workflow_call:

env:
  REPO_NAME: ${{ github.event.repository.name }}
  MOD_PATH: ~/.vmodules/vibe

jobs:
  setup:
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install V
        uses: vlang/setup-v@v1.3
        with:
          check-latest: true
      - name: Setup Dependencies
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libcurl4-openssl-dev
          version: 1.0
      - name: Checkout ${{ env.REPO_NAME }}
        uses: actions/checkout@v4
        with:
          path: ${{ env.REPO_NAME }}
      - name: Setup ${{ env.REPO_NAME }}
        run: cp -r ${{ env.REPO_NAME }} ${{ env.MOD_PATH }}
      - name: Cache
        uses: actions/cache/save@v3
        with:
          path: |
            vlang
            ~/.vmodules
          key: ${{ matrix.os }}-${{ github.sha }}

  lint:
    needs: setup
    uses: ./.github/workflows/lint.yml

  test:
    needs: setup
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-latest]
        cc: [tcc, gcc, clang]
        optimization: ['', -prod, -cstrict]
        exclude:
          - cc: tcc
            optimization: -prod
      fail-fast: false
    runs-on: ${{ matrix.os }}
    env:
      VFLAGS: -cg -stats -cc ${{ matrix.cc }} ${{ matrix.optimization }}
    steps:
      - name: Restore Cache
        uses: actions/cache/restore@v3
        with:
          path: |
            vlang
            ~/.vmodules
          key: ${{ matrix.os }}-${{ github.sha }}
          fail-on-cache-miss: true
      - name: Setup V
        uses: vlang/setup-v@v1.3
      - name: Setup Dependencies
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libcurl4-openssl-dev
          version: 1.0
      - name: Build
        run: v -shared ${{ env.MOD_PATH }}
      - name: Run tests
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 3
          max_attempts: 3
          command: v ${{ env.VFLAGS }} test ${{ env.MOD_PATH }}

  test-sanitzed:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        cc: [gcc, clang]
        sanitizer: [address, leak]
      fail-fast: false
    env:
      VFLAGS: -cg -stats -cc ${{ matrix.cc }}
    steps:
      - name: Restore Cache
        uses: actions/cache/restore@v3
        with:
          path: |
            vlang
            ~/.vmodules
          key: ubuntu-latest-${{ github.sha }}
          fail-on-cache-miss: true
      - name: Setup V
        uses: vlang/setup-v@v1.3
      - name: Setup Dependencies
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libcurl4-openssl-dev
          version: 1.0
      - name: Run tests
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 3
          max_attempts: 3
          command: |
            if [[ ${{ matrix.cc }} == "gcc" && ${{ matrix.sanitizer }} == "address" ]]; then
              cmd="v ${{ env.VFLAGS }} -cflags -fsanitize=address -cflags -fsanitize-address-use-after-scope -cflags -fsanitize=pointer-compare -cflags -fsanitize=pointer-subtract test ${{ env.MOD_PATH }}"
            else
              cmd="v ${{ env.VFLAGS }} -cflags -fsanitize=${{ matrix.sanitizer }} test ${{ env.MOD_PATH }}"
            fi
            echo "$cmd"
            eval "$cmd"
